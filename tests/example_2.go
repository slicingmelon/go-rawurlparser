package main

import (
	"fmt"
	"strings"
)

type RawURL struct {
	Original string
	Scheme   string
	Host     string
	Path     string
	Query    string
	Fragment string
}

func RawURLParse(rawURL string) *RawURL {
	result := &RawURL{
		Original: rawURL,
	}

	// Work with the input
	remaining := rawURL

	// Get scheme (everything before ://)
	if idx := strings.Index(remaining, "://"); idx != -1 {
		result.Scheme = remaining[:idx]
		remaining = remaining[idx+3:]
	}

	// Get fragment (everything after #)
	if idx := strings.Index(remaining, "#"); idx != -1 {
		result.Fragment = remaining[idx+1:]
		remaining = remaining[:idx]
	}

	// Get query (everything after ?)
	if idx := strings.Index(remaining, "?"); idx != -1 {
		result.Query = remaining[idx+1:]
		remaining = remaining[:idx]
	}

	// Get path (everything after first /)
	if idx := strings.Index(remaining, "/"); idx != -1 {
		result.Path = remaining[idx:]
		remaining = remaining[:idx]
	}

	// What remains is the host
	result.Host = remaining

	return result
}

func main() {
	baseUrl := "https://www.example.com/path1/path2"
	variants := []string{
		`,`,
		`;`,
		`;?`,
		`;/`,
		`;/.;.`,
		`;/..`,
		`;/..;`,
		`;/../`,
		`;/../;/`,
		`;/../;/../`,
		`;/../.;/../`,
		`;/../../`,
		`;/../..//`,
		`;/.././../`,
		`;/..//`,
		`;/..//../`,
		`;/..///`,
		`;/..//%2e%2e/`,
		`;/..//%2f`,
		`;/../%2f/`,
		`;/..%2f`,
		`;/..%2f..%2f`,
		`;/..%2f/`,
		`;/..%2f//`,
		`;/..%2f%2e%2e%2f`,
		`;/..%2f%2f../`,
		`;/.%2e`,
		`;/.%2e/%2e%2e/%2f`,
		`;/。。`,
		`;/。。/`,
		`;/。。%2f/`,
		`;//`,
		`;//..`,
		`;//../../`,
		`;///..`,
		`;///../`,
		`;///..//`,
		`;//%2f../`,
		`;/%2e.`,
		`;/%2e%2e`,
		`;/%2e%2e/`,
		`;/%2e%2e%2f/`,
		`;/%2e%2e%2f%2e%2e%2f`,
		`;/%2e%2e%2f%2f`,
		`;/%2f/../`,
		`;/%2f/..%2f`,
		`;/%2f%2f../`,
		`;/$2e%2e%2f..%2f`,
		`;%09`,
		`;%09;`,
		`;%09..`,
		`;%09..;`,
		`;%2f;/;/..;/`,
		`;%2f;//../`,
		`;%2f..`,
		`;%2F..`,
		`;%2f..;/;//`,
		`;%2f..;//;/`,
		`;%2f..;///`,
		`;%2f../;/;/`,
		`;%2f../;/;/;`,
		`;%2f../;//`,
		`;%2f..//;/`,
		`;%2f..//;/;`,
		`;%2f..//../`,
		`;%2f..//..%2f`,
		`;%2f..///`,
		`;%2f..///;`,
		`;%2f../%2f../`,
		`;%2f../%2f..%2f`,
		`;%2f..%2f..%2f%2f`,
		`;%2f..%2f/`,
		`;%2f..%2f/../`,
		`;%2f..%2f/..%2f`,
		`;%2f..%2f%2e%2e%2f%2f`,
		`;%2f。。`,
		`;%2F。。`,
		`;%2f/;/..;/`,
		`;%2f/;/../`,
		`;%2f//..;/`,
		`;%2f//../`,
		`;%2f//..%2f`,
		`;%2f//。。%2f`,
		`;%2f/%2f../`,
		`;%2f%2e%2e`,
		`;%2f%2e%2e%2f%2e%2e%2f%2f`,
		`;%2f%2f/../`,
		`;foo=bar/`,
		`;x`,
		`;x;`,
		`;x/`,
		`?`,
		`?;`,
		`??`,
		`???`,
		`?#`,
		`.`,
		`.;`,
		`.;/`,
		`..`,
		`..;`,
		`..;/`,
		`..;\`,
		`..;\;`,
		`..;\\`,
		`..;%00/`,
		`..;%0d/`,
		`..;%ff/`,
		`..;foo=bar/`,
		`../`,
		`.././`,
		`..\`,
		`..\;`,
		`..\\`,
		`..%00;/`,
		`..%00/`,
		`..%00/;`,
		`..%09`,
		`..%0d;/`,
		`..%0d/`,
		`..%0d/;`,
		`..%2f`,
		`..%3B`,
		`..%5c`,
		`..%5c/`,
		`..%ff`,
		`..%ff;/`,
		`..%ff/`,
		`..%ff/;`,
		`./`,
		`./.`,
		`.//`,
		`.//./`,
		`.%00`,
		`.%00/`,
		`.%2e/`,
		`.+.`,
		`.+.;/.+.;/`,
		`.+./.+`,
		`.+./.+./`,
		`.html`,
		`.json`,
		`。。;`,
		`。。%5c`,
		`/`,
		`/;`,
		`/;?`,
		`/;/`,
		`/;/../`,
		`/;/../;/`,
		`/;/../;/../`,
		`/;/../.;/../`,
		`/;/../../`,
		`/;/../..//`,
		`/;/.././../`,
		`/;/..//`,
		`/;/..//../`,
		`/;/..///`,
		`/;/..//%2e%2e/`,
		`/;/..//%2f`,
		`/;/../%2f/`,
		`/;//`,
		`/;///`,
		`/;x`,
		`/;x;`,
		`/;x/`,
		`/?`,
		`/?;`,
		`/.`,
		`/.;`,
		`/.;/`,
		`/.;//`,
		`/..`,
		`/..;/`,
		`/..;/;/`,
		`/..;/;/..;/`,
		`/..;/..;/`,
		`/..;/../`,
		`/..;//`,
		`/..;//..;/`,
		`/..;//../`,
		`/..;%2f`,
		`/..;%2f..;%2f`,
		`/..;%2f..;%2f..;%2f`,
		`/../`,
		`/../;/`,
		`/../;/../`,
		`/../.;/../`,
		`/../..;/`,
		`/../../`,
		`/../../../`,
		`/../../..//`,
		`/../..//`,
		`/../..//../`,
		`/.././../`,
		`/..//`,
		`/..//..;/`,
		`/..//../`,
		`/..//../../`,
		`/..%2f`,
		`/..%2f..%2f`,
		`/..%2f..%2f..%2f`,
		`/./`,
		`/.//`,
		`/.%00`,
		`/.%00/`,
		`/.randomstring`,
		`/。。//`,
		`/*`,
		`/*/`,
		`//`,
		`//;`,
		`//;/`,
		`//?anything`,
		`//.`,
		`//.;/`,
		`//..`,
		`//..;`,
		`//../../`,
		`//./`,
		`///`,
		`///;`,
		`///;/`,
		`///..`,
		`///..;`,
		`///..;/`,
		`///..;//`,
		`///../`,
		`///..//`,
		`////`,
		`//%2f`,
		`/#`,
		`/%20`,
		`/%20#`,
		`/%20%20/`,
		`/%20%23`,
		`/%23`,
		`/%252e/`,
		`/%252e%252e%252f/`,
		`/%252e%252e%253b/`,
		`/%252e%252f/`,
		`/%252e%253b/`,
		`/%252f`,
		`/%2e/`,
		`/%2e//`,
		`/%2e%2e`,
		`/%2e%2e/`,
		`/%2e%2e%2f/`,
		`/%2e%2e%3b/`,
		`/%2e%2f/`,
		`/%2e%3b/`,
		`/%2e%3b//`,
		`/%2f`,
		`/%2f/`,
		`/%3b/`,
		`/%u002e;`,
		`/%u002e/%u002e`,
		`/%u002e/%u002e;`,
		`/x;/..`,
		`/x;/../`,
		`/x;/%2e%2e`,
		`/x;/%2e%2e/`,
		`/x/;/..;/`,
		`/x/;/../`,
		`/x/..;/`,
		`/x/..;/;/`,
		`/x/..;//`,
		`/x/../`,
		`/x/../;/`,
		`/x/..//`,
		`/x/。。;//`,
		`/x//..;/`,
		`/x//../`,
		`\..\.\`,
		`&`,
		`#`,
		`#?`,
		`%`,
		`%09`,
		`%09;`,
		`%09;/`,
		`%09..`,
		`%09..;`,
		`%09..;/`,
		`%09../`,
		`%09/`,
		`%09%3b`,
		`%20`,
		`%20;`,
		`%20/`,
		`%23`,
		`%23%3f`,
		`%252f/`,
		`%252f%252f`,
		`%26`,
		`%2e`,
		`%2e;`,
		`%2e;/`,
		`%2e;//`,
		`%2e;%2f`,
		`%2e;%2f%2f`,
		`%2e/`,
		`%2e//`,
		`%2e%2e`,
		`%2e%2e;`,
		`%2e%2e/`,
		`%2e%2e%2f`,
		`%2e%2f`,
		`%2e%2f%2f`,
		`%2f`,
		`%2f;?`,
		`%2f?;`,
		`%2f/`,
		`%2f//`,
		`%2f/%2f`,
		`%2f%20%23`,
		`%2f%23`,
		`%2f%2f`,
		`%2f%2f%2f`,
		`%2f%3b%2f`,
		`%2f%3b%2f%2f`,
		`%2f%3f`,
		`%2f%3f/`,
		`%3b`,
		`%3b/..`,
		`%3b//%2f../`,
		`%3b/%2e.`,
		`%3b/%2e%2e/..%2f%2f`,
		`%3b/%2f%2f../`,
		`%3b%09`,
		`%3b%2f..`,
		`%3b%2f。。`,
		`%3b%2f%2e.`,
		`%3b%2f%2e%2e`,
		`%3b%2f%2e%2e%2f%2e%2e%2f%2f`,
		`%3f`,
		`%3f%23`,
		`%3f%3f`,
		`%c0%af`,
		`%c0%af;%c0%af`,
		`%c0%af;%c0%af%c0%af`,
		`%c0%af;x/..`,
		`%c0%af.`,
		`%c0%af.;`,
		`%c0%af.;%c0%af`,
		`%c0%af.;%c0%af%c0%af`,
		`%c0%af.%c0%af`,
		`%c0%af.%c0%af%c0%af`,
		`%c0%af%c0%af`,
		`%c0%af%c0%af..`,
		`%c0%af%c0%af%c0%af`,
		`%c0%afx;%c0%af..`,
		`%c0%afx;%c0%af..;`,
		`%c0%afx%c0%af..`,
		`%c0%afx%c0%af..;`,
		`%ef%bc%8f`,
		`%ef%bc%8f;%ef%bc%8f`,
		`%ef%bc%8f;x/..`,
		`%ef%bc%8f.`,
		`%ef%bc%8f.;`,
		`%ef%bc%8f.;%ef%bc%8f`,
		`%ef%bc%8f.;%ef%bc%8f%ef%bc%8f`,
		`%ef%bc%8f.%ef%bc%8f`,
		`%ef%bc%8f.%ef%bc%8f%ef%bc%8f`,
		`%ef%bc%8f%ef%bc%8f`,
		`%ef%bc%8f%ef%bc%8f..`,
		`%ef%bc%8f%ef%bc%8f%ef%bc%8f`,
		`%ef%bc%8fx;%ef%bc%8f..`,
		`%ef%bc%8fx;%ef%bc%8f..;`,
		`%ef%bc%8fx%ef%bc%8f..`,
		`%ef%bc%8fx%ef%bc%8f..;`,
		`%ef%bc%8fx%ef%bc%8f。。`,
		`%u002e`,
		`%u002e;`,
		`%u002e/%u002e`,
		`x;/..`,
		`x;/../`,
		`x;/。。`,
		`x;/%2e%2e`,
		`x;/%2e%2e/`,
		`\xFF\x2E\xFF\x2E`,
		`�.�.`,
		`%FF%2E%FF%2E`,
		`�.�.`,
	}

	for _, variant := range variants {
		url := baseUrl + variant
		fmt.Printf("\nTesting URL: %s\n", url)
		fmt.Printf("----------------------------------------\n")
		parsed := RawURLParse(url)
		fmt.Printf("Scheme:   %q\n", parsed.Scheme)
		fmt.Printf("Host:     %q\n", parsed.Host)
		fmt.Printf("Path:     %q\n", parsed.Path)
		fmt.Printf("Query:    %q\n", parsed.Query)
		fmt.Printf("Fragment: %q\n", parsed.Fragment)
		fmt.Printf("Original: %q\n", parsed.Original)
	}
}
